// todo CSS REFACTORING :
// ici ajouter les mixins de grid et de flex

@mixin flex {
  display: flex;
}

@mixin flex-desktop {
  display: block;

  @include breakpoint("medium") {
    display: flex;
  }
}

@mixin flex-center {
  @include flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-item-margin($size: "default") {
  $sizes: (
    default: 1rem,
    small: 0.6rem,
    xs: 0.4rem,
    xxs: 0.2rem,
  );

  @if map-has-key($sizes, $size) {
    margin-right: map-get($sizes, $size);
  } @else {
    @warn "`#{$size}` is not a valid key in `$sizes` Try 'default', 'small', 'xs' or 'xxs'.";
  }

  &:last-child {
    margin-right: 0 !important;
  }
}

@mixin push-right {
  margin-left: auto;
}

@mixin push-left {
  margin-right: auto;
}

@mixin view {
  width: 100%;
  min-height: 100%;
}
@mixin workarea-small {
  max-width: 1000px; // $layout-size
  margin-left: auto;
  margin-right: auto;
}

@mixin container-spacing($dense: false, $padding: true) {
  max-width: $container-size; 
  margin-left: auto;
  margin-right: auto;
  @if $padding {
    @include inner-space("s", "x");
    @include inner-space("m", "y");
  }
  
  @include breakpoint("medium") {
    @if not ($dense) {
      max-width: $container-size-l; 
      @if $padding {
        @include inner-space("xxl", "x");
      }
    }
  }
}

// GRID system 
@mixin grid-base {
  display: grid;
  grid-gap: var(--grid-gap, 0);
  width: 100%;
  max-width: 100%;
}

@mixin grid {
  @include grid-base;
  --grid-cols: #{$grid-columns};
  grid-template-columns: repeat(var(--grid-cols), 1fr);

  > * {
    grid-column: span var(--span, #{$grid-columns}) / span var(--span, #{$grid-columns});
  }
}

@mixin set-col($size: 'auto') {
  $sizemap: (
    'auto': 0, 
    "xs": 8rem, 
    "sm": 10rem, 
    "md": 15rem, 
    "lg": 20rem, 
    "xl": 25rem
  ) !default;
  --col-min-width: #{map-get($sizemap, $size)};
}

@mixin grid-auto($size: 'auto') {
  @include grid-base;
  @if ($size != 'auto') {
    @include set-col($size);
  }
  --col-min-width: 0;
  grid-template-columns: repeat(auto-fit, minmax(var(--col-min-width), 1fr));
}

@mixin set-gap($size: 'none') {
  $gapmap: (
    'none': 0,
    'xxxs': var(--space-xxxs, 0.25rem), 
    "xxs": var(--space-xxs, 0.375rem), 
    "xs": var(--space-xs, 0.5rem), 
    "sm": var(--space-sm, 0.75rem), 
    "md": var(--space-md, 1.25rem), 
    "lg": var(--space-lg, 2rem), 
    "xl": var(--space-xl, 3.25rem),
    "xxl": var(--space-xxl, 5.25rem),
    "xxxl": var(--space-xxxl, 8.5rem)
  ) !default;

  --grid-gap: #{map-get($gapmap, $size)};
}

@mixin col($amount: 12) {
  --span: #{$amount};
}

@mixin col-start($amount: 1) {
  grid-column-start: $amount;
}

@mixin col-end($amount: 1) {
  grid-column-end: $amount;
}

/** Inner spacing */
@mixin inner-space($value: 'm', $dir: null, ) {
  $directions: (
    "t": 'top',
    "b": 'bottom',
    "l": 'left',
    "r": 'right'
  );

  @if $dir == 'x' {
    padding-left: var(--space-#{$value});
    padding-right: var(--space-#{$value});
  } @else if $dir == 'y' {
    padding-top: var(--space-#{$value});
    padding-bottom: var(--space-#{$value});
  } @else if $dir and map-has-key($directions, $dir) {
    padding-#{map-get($directions, $dir)}: var(--space-#{$value});
  } @else {
    padding: var(--space-#{$value});
  }
}